<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Dagger Multibindings - Tag - Coroutinedispatchers&#39; blog</title>
        <link>https://coroutinedispatcher.github.io/coroutinedispatcher/tags/dagger-multibindings/</link>
        <description>Dagger Multibindings - Tag - Coroutinedispatchers&#39; blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>stavro96@gmail.com (Stavro Xhardha)</managingEditor>
            <webMaster>stavro96@gmail.com (Stavro Xhardha)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 08 Aug 2019 14:03:00 &#43;0200</lastBuildDate><atom:link href="https://coroutinedispatcher.github.io/coroutinedispatcher/tags/dagger-multibindings/" rel="self" type="application/rss+xml" /><item>
    <title>Dagger Multibindings saved my time</title>
    <link>https://coroutinedispatcher.github.io/coroutinedispatcher/posts/dagger-multibindings-saved-my-time/</link>
    <pubDate>Thu, 08 Aug 2019 14:03:00 &#43;0200</pubDate>
    <author>Author</author>
    <guid>https://coroutinedispatcher.github.io/coroutinedispatcher/posts/dagger-multibindings-saved-my-time/</guid>
    <description><![CDATA[While the Android architecture made development simpler, we should always be aware of the Lifecycle and with that, the right way to provide ViewModels. Creating one ViewModel factory for each Fragment and ViewModel you have is really expensive, bad architecture, and too much unnecessary code.Â Not to mention the fact that you should care about scopes, dependencies, components modules when using Dagger for DI.
You can have a simple &ldquo;generic&rdquo; ViewModel factory for all your app as a Singleton, with the help of Kotlin Reflection and Daggers Multibinding.]]></description>
</item></channel>
</rss>
