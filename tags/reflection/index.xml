<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Reflection - Tag - Coroutinedispatchers&#39; blog</title>
        <link>http://coroutinedispatcher.com/tags/reflection/</link>
        <description>Reflection - Tag - Coroutinedispatchers&#39; blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>stavro96@gmail.com (Stavro Xhardha)</managingEditor>
            <webMaster>stavro96@gmail.com (Stavro Xhardha)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 30 Sep 2019 10:00:00 &#43;0200</lastBuildDate><atom:link href="http://coroutinedispatcher.com/tags/reflection/" rel="self" type="application/rss+xml" /><item>
    <title>An early look at Dagger Reflect</title>
    <link>http://coroutinedispatcher.com/posts/an-early-look-at-dagger-reflect/</link>
    <pubDate>Mon, 30 Sep 2019 10:00:00 &#43;0200</pubDate>
    <author>Author</author>
    <guid>http://coroutinedispatcher.com/posts/an-early-look-at-dagger-reflect/</guid>
    <description><![CDATA[When it comes to solving the Dependency Inversion principle, there is no better way then using annotations in the JVM world. However, generating code in compile time has some costs. For example the build time. And I believe this is the only thing dagger can&rsquo;t do well alone.
This is not a bye bye dagger post. This is mostly, obtaining the most out of Dagger.
To solve this problem, Dagger-Reflect was written.]]></description>
</item></channel>
</rss>
