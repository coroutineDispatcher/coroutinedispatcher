<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Micro Frontend - Tag - Coroutinedispatchers&#39; blog</title>
        <link>coroutinedispatcher.github.io/tags/micro-frontend/</link>
        <description>Micro Frontend - Tag - Coroutinedispatchers&#39; blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>stavro96@gmail.com (Stavro Xhardha)</managingEditor>
            <webMaster>stavro96@gmail.com (Stavro Xhardha)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 25 Nov 2019 10:13:00 &#43;0100</lastBuildDate><atom:link href="coroutinedispatcher.github.io/tags/micro-frontend/" rel="self" type="application/rss+xml" /><item>
    <title>Modularizing your Android app, some quick notes (Part 4)</title>
    <link>coroutinedispatcher.github.io/posts/modularizing-your-android-app-some/</link>
    <pubDate>Mon, 25 Nov 2019 10:13:00 &#43;0100</pubDate>
    <author>Author</author>
    <guid>coroutinedispatcher.github.io/posts/modularizing-your-android-app-some/</guid>
    <description><![CDATA[Basically, in part 3 of this series we managed to fully modularize an Android app.Â However there are some notes that need to be taken. We didn&rsquo;t cover too much about resources (res folder) in any of our parts therefore we are handling it now.
Here are some things that we should notice about resources in modularization:
1- Strings. No need there for a large file of it. It&rsquo;s easier when each module has access to it&rsquo;s own string values rather than accessing them all from a :core_module.]]></description>
</item><item>
    <title>Modularizing your Android app, breaking the monolith (Part 3)</title>
    <link>coroutinedispatcher.github.io/posts/modularizing-your-android-app-breaking_18/</link>
    <pubDate>Mon, 18 Nov 2019 08:57:00 &#43;0100</pubDate>
    <author>Author</author>
    <guid>coroutinedispatcher.github.io/posts/modularizing-your-android-app-breaking_18/</guid>
    <description><![CDATA[On our latest article, what we did was creating a Dagger component about almost all of our features and provided a ViewModel(Factory) for every Fragment we had inside a module. As said, this is a little too much work for Dagger, the programmer and each feature. It&rsquo;s a total overkill of using Dagger actually, we could have stuck to a manual DI instead, but I required you to be patient.]]></description>
</item><item>
    <title>Modularizing your Android app, breaking the monolith (Part 2)</title>
    <link>coroutinedispatcher.github.io/posts/modularizing-your-android-app-breaking_11/</link>
    <pubDate>Mon, 11 Nov 2019 09:15:00 &#43;0100</pubDate>
    <author>Author</author>
    <guid>coroutinedispatcher.github.io/posts/modularizing-your-android-app-breaking_11/</guid>
    <description><![CDATA[This is part 2 of a series of articles about modularizing Android app. If you haven&rsquo;t yet read the first article, you may find it here.
On our first article we just moved some classes outside the application and applied as an independent module. But what if we have dependencies pulled from the application level? This could be a small challenge. First of all, we want to clarify on how are we going to modularize the app.]]></description>
</item><item>
    <title>Modularizing your Android app, breaking the monolith (Part 1)</title>
    <link>coroutinedispatcher.github.io/posts/modularizing-your-android-app-breaking/</link>
    <pubDate>Mon, 04 Nov 2019 09:30:00 &#43;0100</pubDate>
    <author>Author</author>
    <guid>coroutinedispatcher.github.io/posts/modularizing-your-android-app-breaking/</guid>
    <description><![CDATA[Inspired by a Martin Fowlers post about Micro Frontends, I decided to break my monolithic app into a modular app. I tried to read a little more about breaking monolithic apps in Android, and as far as I got, I felt confident to share my experience with you. This will be some series of blog posts where we actually try to break a simple app into a modularized Android app.]]></description>
</item></channel>
</rss>
