<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Dagger 2 - Tag - Coroutinedispatchers&#39; blog</title>
        <link>https://coroutinedispatcher.github.io/coroutinedispatcher/tags/dagger-2/</link>
        <description>Dagger 2 - Tag - Coroutinedispatchers&#39; blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>stavro96@gmail.com (Stavro Xhardha)</managingEditor>
            <webMaster>stavro96@gmail.com (Stavro Xhardha)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 02 Dec 2019 09:06:00 &#43;0100</lastBuildDate><atom:link href="https://coroutinedispatcher.github.io/coroutinedispatcher/tags/dagger-2/" rel="self" type="application/rss+xml" /><item>
    <title>Are service locators in Android actually simple?</title>
    <link>https://coroutinedispatcher.github.io/coroutinedispatcher/posts/are-service-locators-in-android/</link>
    <pubDate>Mon, 02 Dec 2019 09:06:00 &#43;0100</pubDate>
    <author>Author</author>
    <guid>https://coroutinedispatcher.github.io/coroutinedispatcher/posts/are-service-locators-in-android/</guid>
    <description><![CDATA[This week, I&rsquo;ve been playing with service locators in Android. I made this repo with 3 different branches. One of them is using Dagger as a DI tool, the other branches are implementation with KodeIn and Koin.
The app is pretty simple, just retrieves some data from a Cat API, saves them to a local Room persistence and then renders them to the screen:
hljs.initHighlightingOnLoad();

The screen renders just a the list of cats retrieved by the database after the data are fetched from a remote API.]]></description>
</item><item>
    <title>Modularizing your Android app, some quick notes (Part 4)</title>
    <link>https://coroutinedispatcher.github.io/coroutinedispatcher/posts/modularizing-your-android-app-some/</link>
    <pubDate>Mon, 25 Nov 2019 10:13:00 &#43;0100</pubDate>
    <author>Author</author>
    <guid>https://coroutinedispatcher.github.io/coroutinedispatcher/posts/modularizing-your-android-app-some/</guid>
    <description><![CDATA[Basically, in part 3 of this series we managed to fully modularize an Android app. However there are some notes that need to be taken. We didn&rsquo;t cover too much about resources (res folder) in any of our parts therefore we are handling it now.
Here are some things that we should notice about resources in modularization:
1- Strings. No need there for a large file of it. It&rsquo;s easier when each module has access to it&rsquo;s own string values rather than accessing them all from a :core_module.]]></description>
</item><item>
    <title>Modularizing your Android app, breaking the monolith (Part 3)</title>
    <link>https://coroutinedispatcher.github.io/coroutinedispatcher/posts/modularizing-your-android-app-breaking_18/</link>
    <pubDate>Mon, 18 Nov 2019 08:57:00 &#43;0100</pubDate>
    <author>Author</author>
    <guid>https://coroutinedispatcher.github.io/coroutinedispatcher/posts/modularizing-your-android-app-breaking_18/</guid>
    <description><![CDATA[On our latest article, what we did was creating a Dagger component about almost all of our features and provided a ViewModel(Factory) for every Fragment we had inside a module. As said, this is a little too much work for Dagger, the programmer and each feature. It&rsquo;s a total overkill of using Dagger actually, we could have stuck to a manual DI instead, but I required you to be patient.]]></description>
</item><item>
    <title>Modularizing your Android app, breaking the monolith (Part 2)</title>
    <link>https://coroutinedispatcher.github.io/coroutinedispatcher/posts/modularizing-your-android-app-breaking_11/</link>
    <pubDate>Mon, 11 Nov 2019 09:15:00 &#43;0100</pubDate>
    <author>Author</author>
    <guid>https://coroutinedispatcher.github.io/coroutinedispatcher/posts/modularizing-your-android-app-breaking_11/</guid>
    <description><![CDATA[This is part 2 of a series of articles about modularizing Android app. If you haven&rsquo;t yet read the first article, you may find it here.
On our first article we just moved some classes outside the application and applied as an independent module. But what if we have dependencies pulled from the application level? This could be a small challenge. First of all, we want to clarify on how are we going to modularize the app.]]></description>
</item><item>
    <title>An early look at Dagger Reflect</title>
    <link>https://coroutinedispatcher.github.io/coroutinedispatcher/posts/an-early-look-at-dagger-reflect/</link>
    <pubDate>Mon, 30 Sep 2019 10:00:00 &#43;0200</pubDate>
    <author>Author</author>
    <guid>https://coroutinedispatcher.github.io/coroutinedispatcher/posts/an-early-look-at-dagger-reflect/</guid>
    <description><![CDATA[When it comes to solving the Dependency Inversion principle, there is no better way then using annotations in the JVM world. However, generating code in compile time has some costs. For example the build time. And I believe this is the only thing dagger can&rsquo;t do well alone.
This is not a bye bye dagger post. This is mostly, obtaining the most out of Dagger.
To solve this problem, Dagger-Reflect was written.]]></description>
</item><item>
    <title>How to produce the SavedStateHandle in your ViewModel using AssistedInject</title>
    <link>https://coroutinedispatcher.github.io/coroutinedispatcher/posts/how-to-produce-savedstatehandle-in-your/</link>
    <pubDate>Tue, 27 Aug 2019 10:31:00 &#43;0200</pubDate>
    <author>Author</author>
    <guid>https://coroutinedispatcher.github.io/coroutinedispatcher/posts/how-to-produce-savedstatehandle-in-your/</guid>
    <description><![CDATA[One of my previous article Dagger Multibinding Saved My Time &ldquo;claimed&rdquo; to have found the right practice for providing ViewModels without producing a ViewModel Factory for each ViewModel. Apparently, I was wrong. There are 2 main problems with that approach:
1 - I might forget to add a ViewModel in the Map graph.
2 - With the new SavedStateHandle which stays uniqely in each ViewModel I can&rsquo;t use a generic ViewModel Factory.]]></description>
</item><item>
    <title>Dagger Multibindings saved my time</title>
    <link>https://coroutinedispatcher.github.io/coroutinedispatcher/posts/dagger-multibindings-saved-my-time/</link>
    <pubDate>Thu, 08 Aug 2019 14:03:00 &#43;0200</pubDate>
    <author>Author</author>
    <guid>https://coroutinedispatcher.github.io/coroutinedispatcher/posts/dagger-multibindings-saved-my-time/</guid>
    <description><![CDATA[While the Android architecture made development simpler, we should always be aware of the Lifecycle and with that, the right way to provide ViewModels. Creating one ViewModel factory for each Fragment and ViewModel you have is really expensive, bad architecture, and too much unnecessary code. Not to mention the fact that you should care about scopes, dependencies, components modules when using Dagger for DI.
You can have a simple &ldquo;generic&rdquo; ViewModel factory for all your app as a Singleton, with the help of Kotlin Reflection and Daggers Multibinding.]]></description>
</item></channel>
</rss>
